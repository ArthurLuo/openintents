<?xml version="1.0" encoding="UTF-8"?>
<project name="DependencyManager" >

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked in in Version
         Control Systems. -->
    <property file="local.properties" />

    <!-- The build.properties file can be created by you and is never touched
         by the 'android' tool. This is the place to change some of the default property values
         used by the Ant rules.
         Here are some properties you may want to change/update:

         application.package
             the name of your application package as defined in the manifest. Used by the
             'uninstall' rule.
         source.dir
             the name of the source directory. Default is 'src'.
         out.dir
             the name of the output directory. Default is 'bin'.

         Properties related to the SDK location or the project target should be updated
          using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your application and
         should be checked in in Version Control Systems.

         -->
    <property file="build.properties" />

    <!-- The default.properties file is created and updated by the 'android' tool, as well
         as ADT.
         This file is an integral part of the build system for your application and
         should be checked in in Version Control Systems. -->
    <property file="default.properties" />

    <!-- Custom Android task to deal with the project target, and import the proper rules.
         This requires ant 1.6.0 or above. -->
    <path id="android.antlibs">
        <pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />
        <pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />
        <pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />
        <pathelement path="${sdk.dir}/tools/lib/apkbuilder.jar" />
        <pathelement path="${sdk.dir}/tools/lib/jarutils.jar" />
    </path>

    <taskdef name="setup"
        classname="com.android.ant.SetupTask"
        classpathref="android.antlibs" />

    <!-- Execute the Android Setup task that will setup some properties specific to the target,
         and import the build rules files.

         The rules file is imported from
            <SDK>/platforms/<target_platform>/templates/android_rules.xml

         To customize some build steps for your project:
         - copy the content of the main node <project> from android_rules.xml
         - paste it in this build.xml below the <setup /> task.
         - disable the import by changing the setup task below to <setup import="false" />

         This will ensure that the properties are setup correctly but that your customized
         build steps are used.
    -->
    <setup />

    <!-- Root directory -->
    <property name="root.dir" value="${gen.absolute.dir}/.." />
    <property name="root.absolute.dir" location="${root.dir}" />

    <!-- Overloaded targets -->
    <target name="clean" description="Removes output files created by other targets.">
      <delete dir="${out.absolute.dir}" verbose="${verbose}" />
      <delete dir="${gen.absolute.dir}" verbose="${verbose}" />
      <delete file="${external.libs.absolute.dir}/DependencyManagerCommon.jar" verbose="${verbose}" />
    </target>

    <!-- DependencyManagerCommon lib target -->
    <property name="dm-common.absolute.dir" location="${dm-common.dir}" />

    <target name="-dm-common.check" depends="-dirs">
      <condition property="-dm-common.exists">
        <and>
          <available file="${external.libs.absolute.dir}/DependencyManagerCommon.jar" />
        </and>
      </condition>
    </target>

    <target name="-dm-common" depends="-dirs, -dm-common.check" unless="-dm-common.exists">
      <echo>Building DependencyManagerCommon library...</echo>
      <ant
          antfile="build.xml"
          dir="${dm-common.absolute.dir}"
          target="build"
          inheritAll="false"
        >
        <property name="sdk.dir" value="${sdk.dir}" />
        <property name="platform" value="${platform}" />
        <property name="verbose" value="${verbose}" />
      </ant>

      <ant
          antfile="build.xml"
          dir="${dm-common.absolute.dir}"
          target="install"
          inheritAll="false"
        >
        <property name="sdk.dir" value="${sdk.dir}" />
        <property name="platform" value="${platform}" />
        <property name="verbose" value="${verbose}" />
        <property name="install.dir" value="${root.absolute.dir}" />
      </ant>
    </target>

    <!-- Compiles this project's .java files into .class files. -->
    <target name="compile" depends="-resource-src, -aidl, -dm-common"
                description="Compiles project's .java files into .class files">
        <!-- If android rules are used for a test project, its classpath should include
             tested project's location -->
        <condition property="extensible.classpath"
                           value="${tested.project.absolute.dir}/bin/classes" else=".">
            <isset property="tested.project.absolute.dir" />
        </condition>
        <javac encoding="ascii" target="1.5" debug="true" extdirs=""
                destdir="${out.classes.absolute.dir}"
                bootclasspathref="android.target.classpath"
                verbose="${verbose}" classpath="${extensible.classpath}">
            <src path="${source.absolute.dir}" />
            <src path="${gen.absolute.dir}" />
            <classpath>
                <fileset dir="${external.libs.absolute.dir}" includes="*.jar" />
            </classpath>
        </javac>
    </target>
</project>
