<?xml version="1.0" ?>
<project name="OpenIntents" default="package">
	<!--
		The following targets are possible:
		
		* package: creates OpenIntents.apk
		* lib: creates openintents-lib.jar
		* javadoc: creates the JavaDoc
	-->
	
	<property file="build.properties"/>
	
	<!-- Path to Android SDK and tools -->
	<property name="sdk-dir" value="${android.sdk}" />
	<property name="android-tools" value="${sdk-dir}/tools" />
	<echo>Using Android SDK directory ${sdk-dir}</echo>

	<!-- Input file for source files to be included in
	     lib javadoc -->
	<property file="build-lib-javadoc.txt" />

    <!-- The intermediates directory -->
    <!-- Eclipse uses "bin" for its own output, so we do the same. -->
    <property name="outdir" value="bin" />

	<!-- Library file positron -->
	<property name="positron-lib-jar" value="lib/positron-0.8-alpha.jar" />

    <!-- No user servicable parts below. -->

    <!-- Input directories -->
    <property name="resource-dir" value="res" />
    <property name="asset-dir" value="assets" />
    <property name="srcdir" value="src" />

    <!-- Output directories -->
    <property name="outdir-classes" value="${outdir}/classes" />
	<property name="docdir" value="doc" />

    <!-- Create R.java in the source directory -->
    <property name="outdir-r" value="src" />

    <!-- Intermediate files -->
    <property name="dex-file" value="classes.dex" />
    <property name="intermediate-dex" value="${outdir}/${dex-file}" />

	<!-- bolt related properties -->
	<property name="bolt.manifest" value="manifest.bolt"/>
	<property name="bolt.template" value="manifest-template.bolt"/>

	<!-- The final package file to generate -->
    <property name="out-package" value="${outdir}/${ant.project.name}.apk" />
	<property name="out-bolt-package" value="${outdir}/bolt/${bolt.package.name}-${version}.apk"/>

	<!-- Tools -->
	<property name="aapt" value="${android-tools}/${android.aapt}" />
	<property name="aidl" value="${android-tools}/${android.aidl}" />
	<property name="dx" value="${android-tools}/${android.dx}" />
	<property name="android-jar" value="${sdk-dir}/${android.jar}" />
    
    <!-- Rules -->

    <!-- Create the output directories if they don't exist yet. -->
    <target name="dirs">
        <mkdir dir="${outdir}" />
        <mkdir dir="${outdir-classes}" />
    </target>

	<target name="clear_layout">
		<echo>purging .bak files </echo>
		<delete>
			<fileset dir="." includes="**/*.bak"/>
		</delete>
	</target>

    <!-- Generate the R.java file for this project's resources. -->
    <target name="resource-src" depends="dirs,clear_layout">
        <echo>Generating R.java...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="compile" />
            <arg value="-m" />
            <arg value="-J" />
            <arg value="${outdir-r}" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
        </exec>
    </target>

    <!-- Generate java classes from .aidl files. -->
    <target name="aidl" depends="dirs">
        <apply executable="${aidl}" failonerror="true">
        	<arg value="-I${srcdir}" />
            <fileset dir="${srcdir}">
                <include name="**/*.aidl"/>
            </fileset>
        </apply>
    </target>

    <!-- Compile this project's .java files into .class files. -->
	<!-- Removed option: -->
    <target name="compile" depends="dirs, resource-src, aidl">
        <javac encoding="ascii" target="1.5" debug="true" extdirs=""
                srcdir="src;acceptance"
                destdir="${outdir-classes}"
                bootclasspath="${android-jar}"
        		classpath="${positron-lib-jar}"
        />
    </target>

    <!-- Convert this project's .class files into .dex files. -->
    <target name="dex" depends="compile">
        <exec executable="${dx}" failonerror="true">
            <arg value="--dex" />
            <arg value="--output=${basedir}/${intermediate-dex}" />
            <arg value="--locals=full" />
            <arg value="--positions=lines" />
            <arg path="${basedir}/${outdir-classes}" />
        </exec>
    </target>

    <!-- Put the project's resources into the output package file. -->
    <target name="package-res-and-assets">
        <echo>Packaging resources and assets...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-c" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-A" />
            <arg value="${asset-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="${out-package}" />
        </exec>
    </target>

    <!-- Same as package-res-and-assets, but without "-A ${asset-dir}" -->
    <target name="package-res-no-assets">
        <echo>Packaging resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-c" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <!-- No assets directory -->
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="${out-package}" />
        </exec>
    </target>

    <!-- Invoke the proper target depending on whether or not
         an assets directory is present. -->
    <!-- TODO: find a nicer way to include the "-A ${asset-dir}" argument
         only when the assets dir exists. -->
    <target name="package-res">
        <available file="${asset-dir}" type="dir"
                property="res-target" value="and-assets" />
        <property name="res-target" value="no-assets" />
        <antcall target="package-res-${res-target}" />
    </target>

    <!-- Put the project's .class files into the output package file. -->
    <target name="package-java" depends="compile, package-res">
        <echo>Packaging java...</echo>
        <jar destfile="${out-package}"
                basedir="${outdir-classes}"
                update="true" />
    </target>

    <!-- Put the project's .dex files into the output package file. -->
    <target name="package-dex" depends="dex, package-res">
        <echo>Packaging dex...</echo>
        <zip destfile="${out-package}.tmp">
            <zipfileset file="${intermediate-dex}" fullpath="${dex-file}" />
            <zipfileset src="${out-package}" />
        </zip>
    	<move file="${out-package}.tmp" tofile="${out-package}" />
    </target>

    <!-- Create the package file for this project from the sources. -->
    <target name="package" depends="package-dex" />

	<!-- ############### optionally ####################### -->

	<!-- ############### openintents-lib.jar ################ -->
	<!-- Create the library -->
	<!-- Content is defined in "build-lib-content.txt" -->
	<target name="lib" 
			depends="package"
			>
			<jar 
				destfile="${outdir}/openintents-lib.jar"
				basedir="${outdir-classes}"
				includesfile="build-lib-content.txt"
				>
			</jar>
	</target>
	
	<!-- ############### bolt related ################ -->
	
	<!-- copy package to package with name according to bolt -->	
	<target name="bolt-apk" depends="package">
		<copy file="${out-package}" tofile="${out-bolt-package}" />
		<echo>bolt package read for upload at ${out-bolt-package}</echo>
	</target>
	
	<!-- create md5 -->
	<target name="bolt-md5" depends="bolt-apk">
		<checksum algorithm="MD5" file="${out-bolt-package}" property="md5"/>
	</target>
	
	<target name="bolt-update-manifest" depends="bolt-md5">
		<copy file="${bolt.template}" tofile="${bolt.manifest}" />
		<replace file="${bolt.manifest}">
			<replacefilter 
		    	token="@version@" 
		    	value="${version}"/>
			<replacefilter 
		    	token="@md5@" 
		    	value="${md5}"/>
			<replacefilter 
		    	token="@package-name@" 
		    	value="${bolt.package.name}"/>			
		</replace>	
		<echo>updated manifest at ${bolt.manifest}</echo>
	</target>
	
	<!-- ############### JavaDoc ####################### -->
	<!-- Create OpenIntents JavaDoc -->
	<target name="javadoc">
		<delete dir="${docdir}" />
		<javadoc access="public" author="true" destdir="${docdir}" 
        	nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" 
        	packagenames="
        		org.openintents,
        	    org.openintents.main,
	    		org.openintents.hardware,
    			org.openintents.lib,
	    		org.openintents.locations,
        		org.openintents.news,
	       		org.openintents.news.services,
 				org.openintents.news.views,
    			org.openintents.provider,
	    		org.openintents.shopping,
        		org.openintents.tags,
        	    org.openintents.tags.content" 
        	source="1.6" sourcepath="acceptance;${srcdir}" splitindex="true" use="true" version="true">
        </javadoc>
    </target>
	
	<!-- Create OpenIntents-Library JavaDoc -->
	<!-- This consists of a subset of classes, defined in "build-lib-javadoc.txt" -->
	<target name="javadoc-lib">
		<delete dir="doc-lib" />
        <javadoc access="public" author="true" destdir="doc-lib"
        	nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" 
        	sourcefiles="${lib-javadoc-include}" 
        	source="1.6" splitindex="true" use="true" version="true">
        </javadoc>
    </target>
	
	<!-- Convencience target -->
	<target name="all" 
		depends="package, lib, javadoc, javadoc-lib, bolt-update-manifest" />
</project>
