<?xml version="1.0" ?>
<project name="Common" default="help">
<!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     If Eclipse does not let you build the project because
     it claims the "help" target above does not exist,
     go to Window->preferences->Ant->Editor->Problems tab
     and add "build.xml" to the ignore list.
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-->
<!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     NOTE: In order for the jar files in the libs folder to
     be properly imported, this build script requires
     Ant 1.8 or higher.
     Download Apache-Ant 1.8 and in Eclipse set
     Window > Preferences > Ant > Runtime > Ant Home...
     to the new Ant path.
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-->
	
<!-- #############################################
     OpenIntents modifications to build.xml follow
     ############################################# -->

	<!-- Read manifest properties , e.g. 
	     manifest(android:versionName) or manifest.package -->
	<xmlproperty file="AndroidManifest.xml" />
	<property name="version" value="${manifest(android:versionName)}" />

	<!-- Overwrite default release file name -->
	<!-- THIS BREAKS THE ANT SCRIPT IN SDK 14 & 15.
		See: http://code.google.com/p/android/issues/detail?id=21465 -->
	<!-- <property name="out.release.file.name"
				value="${ant.project.name}-${version}.apk" /> -->
	<property name="out.release.publish.name"
					value="${ant.project.name}-${version}.apk" />

	<!-- Path for java doc -->
    <property name="out.doc.dir"
                  value="doc" />
	
	<!-- Paths for source release -->
	<property name="out.source.dir" value="release" />
	<property name="out.source.version.name"
	                  value="${ant.project.name}-source-${version}" />
    <property name="out.source.version"
                  location="${out.source.dir}/${out.source.version.name}" />
	

<!-- ################################################
     The default Android 4.0 build.xml script follows
     ################################################ -->
    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <loadproperties srcFile="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
            unless="sdk.dir"
    />


<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
<!--
    <target name="-pre-build">
    </target>
    <target name="-pre-compile">
    </target>

    /* This is typically used for code obfuscation.
       Compiled code location: ${out.classes.absolute.dir}
       If this is not done in place, override ${out.dex.input.absolute.dir} */
    <target name="-post-compile">
    </target>
-->

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: custom -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

<!-- #############################################
     OpenIntents modifications to build.xml follow
     ############################################# -->
	
	<!-- ############### JavaDoc ####################### -->
	<!-- Create JavaDoc -->
	<target name="javadoc" description="Creates JavaDoc documentation from source into ./doc" >
		<delete dir="${out.doc.dir}" />
		<javadoc access="public" author="true" destdir="${out.doc.dir}" 
        	nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" 
        	source="1.6" sourcepath="${source.absolute.dir}" splitindex="true" use="true" version="true">
        </javadoc>
    </target>

	
	<!-- ############### recent_changes.txt ############ -->
	<!-- Copy parts of readme.txt to res/raw/recent_changes.txt.
	Copies the latest 3 version comments and the final
	section of readme.txt into res/raw/recent_changes.txt -->

	<!-- Readme file -->
    <property name="readme.full.file.name"
                  value="readme.txt" />
	
	<!-- res/raw/recent_changes.txt file -->
    <property name="readme.short.file.name"
                  value="res/raw/recent_changes.txt" />
	
	<!-- res/raw/recent_changes.txt file -->
    <property name="readme.short.footer.file.name"
                  value="${build.common.dir}/recent_changes_footer.txt" />
	
	<target name="update-recent-changes" description="Copy the three latest version comments from readme.txt to res/raw/recent_changes.txt">
		<delete file="${readme.short.file.name}"/>
		<copy file="${readme.full.file.name}" tofile="${readme.short.file.name}" >
			<filterchain>
				<!-- The separator is 3 or more "-" in a single line.
					Prepend those by "§", which will be the 
					separating character.
					
					Explanation of the regular expression:
						^  line start
						-  one "-" (repeated twice)
						-* one or more "-"
						$  line end -->
				<tokenfilter>
					<replaceregex
				        pattern="^(---*)$"
				        replace="§\1"/>
				</tokenfilter>
				<!-- Split off the first 3 release items
					and keep everything after the last separator.
					
					Explanation of the regular expression:
						[^§]*  everything except "§"
						§      then a single "§"
						(...)  first group starts that contains
						(...){1,3}  one up to three times
						[^§]*§ everything except "§" followed by "§"
						.*     the rest of the file.
					This is replaced by:
						\1    denotes the first group (which starts
						      from the first opening round bracket)
					Filetokenizer and flag "s" (singleline) treat the
					whole file as single line.
					-->
				<tokenfilter>
					<filetokenizer/>
					<replaceregex
						pattern="[^§]*§(([^§]*§){1,3}).*"
						replace="\1"
						flags="s"/>
				</tokenfilter>
				<!-- Remove the separator "§" -->
				<tokenfilter>
					<replaceregex
						pattern="§"
						replace=""
						flags="g"/>
				</tokenfilter>
				<concatfilter append="${readme.short.footer.file.name}"/>
			</filterchain>
		</copy>
		
	</target>
	
	<!-- ############### Release source ####################### -->

	<!-- Full path of the base directory of OpenIntents -->
	<property name="source.base.dir" location="${basedir}/${source.base}" />
	
	<!-- Application base directory.
		By default this is ".." so that demos are copied as well. -->
	<property name="app.base" value=".." />
	
	<!-- Files to be excluded -->
	<patternset id="exclude.from.source">
		<exclude name="**/bin/**" />
		<exclude name="**/doc/**" />
		<exclude name="**/gen/**" />
		<exclude name="**/release/**" />
		<exclude name="**/tmp/**" />
		<exclude name="**/translations/**" />
		<exclude name="**/.svn" />
		<exclude name="**/build-private.properties" />
		<exclude name="**/local.properties" />
		<exclude name="**/promotion/**" />
	</patternset>


	<!-- This macro creates a path relative to source.base.dir
		and copies all source files into it. -->
	<macrodef name="copy-source">
		<attribute name="source" />
		<sequential>
			<!-- Create a path of @{source} relative to ${source.base.dir}.
				e.g. 
				@{source}="C:\User\Eclipse\OpenIntents\notepad\NotePad",
				${source.base.dir}="C:\User\Eclipse\OpenIntents"
				 -> ${relativepath}="notepad\NotePad" -->
			<local name="relativepath" />
			<pathconvert property="relativepath" targetos="unix">
				<path path="@{source}"/>
				<mapper>
					<globmapper from="${source.base.dir}/*" to="*" handledirsep="yes"/>
				</mapper>
			</pathconvert>
			
			<!-- Now copy the files -->
			<echo>Copy from @{source} to ${out.source.version}/${relativepath}</echo>
			<copy todir="${out.source.version}/${relativepath}">
				<fileset dir="@{source}">
					<patternset refid="exclude.from.source"/>
				</fileset>
			</copy> 
		</sequential>
	</macrodef>
	
	<!-- This macro creates a path relative to source.base.dir
		and copies the source file into it. -->
	<macrodef name="copy-source-file">
		<attribute name="source" />
		<sequential>
			<!-- Create a path of @{source} relative to ${source.base.dir}.
				e.g. 
				@{source}="C:\User\Eclipse\OpenIntents\notepad\NotePad",
				${source.base.dir}="C:\User\Eclipse\OpenIntents"
				 -> ${relativepath}="notepad\NotePad" -->
			<local name="relativepath" />
			<pathconvert property="relativepath" targetos="unix">
				<path path="@{source}"/>
				<mapper>
					<globmapper from="${source.base.dir}/*" to="*" handledirsep="yes"/>
				</mapper>
			</pathconvert>
			
			<!-- Now copy the file -->
			<echo>Copy from @{source} to ${out.source.version}/${relativepath}</echo>
			<copy tofile="${out.source.version}/${relativepath}"
				file="@{source}" />
		</sequential>
	</macrodef>

	<!-- Copy the referenced Android Library Project
		with number "num" to source release -->
	<macrodef name="copy-source-lib" >
		<attribute name="num" />
		<sequential>
			<!-- Ideally, only execute the following, if
				android.library.reference.@{num} exists.
			
				Since "if" does not work with macros yet, 
				here is a simple but inefficient workaround:
				if the referenced library does not exist,
				simply the main project is copied again.
				
				Note that this workaround modifies the property,
				but this does not matter, because the apk has
				been built already through depends="release" -->
			<property name="android.library.reference.@{num}" value="." />
			
			<copy-source source="${android.library.reference.@{num}}"/>
		</sequential>  
	</macrodef>
	
	<!-- Copy to source release -->
	<target name="release-source" depends="release" description="Copies the source code to ./release" >
    	<delete dir="${out.source.dir}"/>
        <mkdir dir="${out.source.dir}" />
		
		<!-- Copy main application.
			Start from parent, so that all demos etc. can be copied as well. -->
		<copy-source source="${app.base}" />
		
		<!-- Copy common ant script and README -->
		<copy-source source="${build.common.dir}" />
		<copy-source-file source="${source.base.dir}/README.txt" />
		
		<!-- Copy referenced Android Library Projects
		    (currently at most 5) -->
		<copy-source-lib num="1" />
		<copy-source-lib num="2" />
		<copy-source-lib num="3" />
		<copy-source-lib num="4" />
		<copy-source-lib num="5" />
		
		<!-- Create ZIP file -->
		<zip destfile="${out.source.version}.zip">
			<zipfileset dir="${out.source.version}" prefix="${out.source.version.name}"/>
		</zip>
		<delete dir="${out.source.version}"/>
		
		<!-- copy apk into releasedir for convenience -->
		<copy file="${out.final.file}"
			tofile="${out.source.dir}/${out.release.publish.name}" >
		</copy>
    </target>
	
	<!-- ############ Convencience target ############## -->
	<target name="all" 
		depends="clean, update-recent-changes, release, release-source"
		description="Creates release apk, JavaDoc, and the source code" />
	<!-- skip target "javadoc" -->
</project>
