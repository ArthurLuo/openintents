package org.openintents.tags.content;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

import net.synklab.deepdroid.Query;
import net.synklab.deepdroid.directory.Directory;

import org.openintents.R;
import org.openintents.provider.ContentIndex;
import org.openintents.provider.ContentIndex.Entry;

import android.content.ContentURIParser;
import android.content.ContentValues;
import android.content.Context;
import android.content.Resources;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.ContentURI;
import android.util.Log;

public class ContentIndexProvider extends android.content.ContentProvider {

	private static final String TAG = "Tables";

	static final String DATABASE_NAME = "deepdroid.db";

	private static final int DATABASE_VERSION = 26;

	private static final ContentURIParser URL_MATCHER;
	private static final int DIRECTORIES = 1;
	private static final int DIRECTORY = 2;
	private static final int INDEX_ENTRIES = 3;

	public static ContentIndexProvider getInstance(Context context)
			throws Exception {
		ContentIndexProvider tables = new ContentIndexProvider(context);
		tables.open();

		if (tables.isCreated()) {
			Resources res = context.getResources();

			DirectoryRegister register = new DirectoryRegister(tables);
			register.fromXML(res.openRawResource(R.raw.browser));
			register.fromXML(res.openRawResource(R.raw.contacts));
			register.fromXML(res.openRawResource(R.raw.notepad));
			register.fromXML(res.openRawResource(R.raw.media));
		}

		return tables;
	}

	private SQLiteDatabase mDb;

	private final Context mContext;

	private boolean created;

	public ContentIndexProvider(Context context) {
		mContext = context;
	}

	public ContentIndexProvider() {
		super();
		mContext = getContext();
	}

	public void open() throws Exception {
		try {
			mDb = mContext.openDatabase(DATABASE_NAME, null);
			if (mDb.getVersion() != DATABASE_VERSION) {
				mContext.deleteDatabase(DATABASE_NAME);
				createTables();
				created = true;
			} else {
				created = false;
			}
		} catch (Exception e) {
			createTables();
			created = true;
		}
	}

	public boolean isCreated() {
		return created;
	}

	public void close() {
		if (mDb != null) {
			mDb.close();
			mDb = null;
		}
	}

	public void createTables() throws Exception {
		Log.d(TAG, "Create databse");

		mDb = mContext.createDatabase(DATABASE_NAME, DATABASE_VERSION,
				Context.MODE_PRIVATE, null);

		Log.d(TAG, "Create tables");

		StringBuffer dirs = new StringBuffer();
		dirs.append("CREATE TABLE dirs (");
		dirs.append("_id INTEGER PRIMARY KEY AUTOINCREMENT,");
		dirs.append("parent_id INTEGER,");
		dirs.append("uri TEXT NOT NULL,");
		dirs.append("package TEXT NOT NULL,");
		dirs.append("name TEXT,");
		dirs.append("text_columns TEXT,");
		dirs.append("id_column TEXT,");
		dirs.append("time_column TEXT,");
		dirs.append("intent_uri TEXT,");
		dirs.append("intent_action TEXT,");
		dirs.append("refreshed LONG,");
		dirs.append("updated LONG);");
		mDb.execSQL(dirs.toString());

		StringBuffer items = new StringBuffer();
		items.append("CREATE TABLE items (");
		items.append("item_id INTEGER NOT NULL,");
		items.append("dir_id INTEGER NOT NULL,");
		items.append("body TEXT NOT NULL,");
		items.append("updated LONG,");
		items.append("UNIQUE(dir_id, item_id));");
		mDb.execSQL(items.toString());

		StringBuffer del_items = new StringBuffer();
		del_items.append("CREATE TRIGGER del_items DELETE ON dirs");
		del_items.append(" BEGIN");
		del_items.append(" DELETE FROM items WHERE dir_id = old._id;");
		del_items.append(" END");
		mDb.execSQL(del_items.toString());
	}

	public int deletePackage(String package_name) {
		String[] args = new String[] { package_name };
		int rows = mDb.delete("dirs", "package = ?", args);
		return rows;
	}

	public Cursor getPackageNames() {
		String[] columns = new String[] { "_id", "package" };
		return mDb.query("dirs", columns, null, null, "package", null, null);
	}

	public int deleteItems(Directory dir, long now) {
		String[] args = new String[] { String.valueOf(dir.id),
				String.valueOf(now) };
		int rows = mDb.delete("items", "dir_id = ? AND updated < ?", args);
		return rows;
	}

	public void addItem(Directory dir, String item_id, String body, long updated) {
		ContentValues values = new ContentValues();
		values.put("item_id", item_id);
		values.put("dir_id", dir.id);
		values.put("body", body);
		values.put("updated", updated);

		mDb.insert("items", null, values);
	}

	public int updateItem(Directory dir, String item_id, String body,
			long updated) {
		ContentValues values = new ContentValues();
		values.put("body", body);
		values.put("updated", updated);

		String[] args = new String[] { String.valueOf(dir.id), item_id };
		int rows = mDb.update("items", values, "dir_id = ? AND item_id = ?",
				args);

		return rows;
	}

	public Cursor searchItems(Query query) {
		StringBuffer selectionBuf = new StringBuffer();
		ArrayList<String> argsList = new ArrayList<String>();

		Directory dir = query.getDirectory();
		if (dir != null && dir.id > 0) {
			selectionBuf.append("dir_id = ?");
			argsList.add(String.valueOf(dir.id));
		}

		String[] keywords = query.getKeywords();
		for (int i = 0; i < keywords.length; i++) {
			if (selectionBuf.length() > 0) {
				selectionBuf.append(" AND ");
			}
			selectionBuf.append("body LIKE ?");
			argsList.add("%" + keywords[i] + "%");
		}

		String[] columns = new String[] { "dir_id", "item_id", "body" };
		String selection = selectionBuf.toString();
		String[] args = argsList.toArray(new String[argsList.size()]);

		Log.d(TAG, selection);

		return mDb.query("items", columns, selection, args, null, null,
				"item_id DESC");
	}

	public int countItems() {
		Cursor query = mDb.query("SELECT COUNT(item_id) FROM items", null);
		int count = 0;
		if (query.first()) {
			count = query.getInt(0);
		}
		query.close();
		return count;
	}

	public void resetDirectories() {
		ContentValues values = new ContentValues();
		values.put("refreshed", 0);
		values.put("updated", 0);

		mDb.update("dirs", values, null, null);
	}

	public void setDirectoryRefreshed(long dirID, long refreshed, long updated) {
		ContentValues values = new ContentValues();
		values.put("refreshed", refreshed);
		values.put("updated", updated);

		mDb.update("dirs", values, "_id = ?", new String[] { String
				.valueOf(dirID) });
	}

	public void setDirectoryUpdated(long dirID, long updated) {
		ContentValues values = new ContentValues();
		values.put("updated", updated);

		mDb.update("dirs", values, "_id = ?", new String[] { String
				.valueOf(dirID) });
	}

	public Directory getDirectoryForCrawl() {
		Directory dir = null;

		Cursor c = getTopLevelDirectories();
		if (c.next()) {
			dir = getDirectory(c);
		}
		c.close();

		return dir;
	}

	public Cursor getTopLevelDirectories() {
		String selection = "parent_id = 0";
		String[] args = null;

		return getDirectories(selection, args, "updated");
	}

	public ArrayList<Directory> getSubDirectories(Directory parent) {
		String selection = "parent_id = ?";
		String[] args = new String[] { String.valueOf(parent.id) };

		return getDirectoryList(selection, args, null);
	}

	public int countSubDirectories(Directory parent) {
		int count = 0;
		String[] columns = new String[] { "COUNT(_id)" };
		String selection = "parent_id = ?";
		String[] args = new String[] { String.valueOf(parent.id) };
		Cursor c = mDb
				.query("dirs", columns, selection, args, null, null, null);
		if (c.next()) {
			count = c.getInt(0);
		}
		c.close();

		return count;
	}

	public long getLastItemId(Directory dir) {
		long item_id = 0;
		String[] columns = new String[] { "MAX(item_id)" };
		String selection = "dir_id = ?";
		String[] args = new String[] { String.valueOf(dir.id) };
		Cursor c = mDb.query("items", columns, selection, args, null, null,
				null);
		if (c.next()) {
			item_id = c.getLong(0);
		}
		c.close();

		return item_id;
	}

	public ArrayList<Directory> getDirectoryList(String selection,
			String[] args, String orderBy) {
		ArrayList<Directory> list = new ArrayList<Directory>();

		Cursor c = getDirectories(selection, args, orderBy);
		while (c.next()) {
			Directory dir = getDirectory(c);
			list.add(dir);
		}
		c.close();

		return list;
	}

	public Cursor getDirectory(long id) {
		return getDirectories("_id = ?", new String[] { String.valueOf(id) },
				null);
	}

	public Cursor getTopLevelDirectoryByPackage(String packageName) {
		return getDirectories("package = ? AND parent_id = 0",
				new String[] { packageName }, null);
	}

	public Cursor getDirectories(String selection, String[] args, String orderBy) {
		String[] columns = new String[] { "_id", "parent_id", "uri", "package",
				"name", "text_columns", "id_column", "time_column",
				"intent_uri", "intent_action", "refreshed", "updated" };
		return mDb.query("dirs", columns, selection, args, null, null, orderBy);
	}

	public static Directory getDirectory(Cursor cursor) {
		Directory dir = new Directory();
		dir.id = cursor.getLong(0);
		dir.parent_id = cursor.getLong(1);
		dir.uri = cursor.getString(2);
		dir.package_name = cursor.getString(3);
		dir.name = cursor.getString(4);
		dir.text_columns = cursor.getString(5);
		dir.id_column = cursor.getString(6);
		dir.time_column = cursor.getString(7);
		dir.intent_uri = cursor.getString(8);
		dir.intent_action = cursor.getString(9);
		dir.refreshed = cursor.getLong(10);
		dir.updated = cursor.getLong(11);
		return dir;
	}

	public void addDirectory(Directory dir) {
		ContentValues values = new ContentValues();
		values.put("parent_id", dir.parent_id);
		values.put("uri", dir.uri);
		values.put("package", dir.package_name);
		values.put("name", dir.name);
		values.put("text_columns", dir.text_columns);
		values.put("id_column", dir.id_column);
		values.put("time_column", dir.time_column);
		values.put("intent_uri", dir.intent_uri);
		values.put("intent_action", dir.intent_action);
		values.put("refreshed", 0);
		values.put("updated", 0);

		dir.id = mDb.insert("dirs", null, values);
	}

	public int updateDirectory(Directory dir) {
		ContentValues values = new ContentValues();
		values.put("_id", dir.id);
		values.put("parent_id", dir.parent_id);
		values.put("uri", dir.uri);
		values.put("package", dir.package_name);
		values.put("name", dir.name);
		values.put("text_columns", dir.text_columns);
		values.put("id_column", dir.id_column);
		values.put("time_column", dir.time_column);
		values.put("intent_uri", dir.intent_uri);
		values.put("intent_action", dir.intent_action);
		values.put("refreshed", 0);
		values.put("updated", 0);

		String[] args = new String[] { String.valueOf(dir.id) };
		int rows = mDb.update("dirs", values, "_id = ?", args);

		return rows;
	}

	/**
	 * method related to ContentProvider
	 */

	@Override
	public String getType(ContentURI url) {
		switch (URL_MATCHER.match(url)) {
		case DIRECTORIES:
			return "vnd.openintents.cursor.dir/contentdirectory";

		case DIRECTORY:
			return "vnd.openintents.cursor.item/contentdirectory";
		case INDEX_ENTRIES:
			return "vnd.openintents.cursor.item/contentindexentry";
		default:
			throw new IllegalArgumentException("Unknown URL " + url);
		}
	}

	@Override
	public boolean onCreate() {
		try {
			open();

			if (isCreated()) {
				Resources res = getContext().getResources();

				DirectoryRegister register = new DirectoryRegister(this);
				register.fromXML(res.openRawResource(R.raw.browser));
				register.fromXML(res.openRawResource(R.raw.contacts));
				register.fromXML(res.openRawResource(R.raw.notepad));
				register.fromXML(res.openRawResource(R.raw.media));
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	@Override
	public Cursor query(ContentURI url, String[] projection, String selection,
			String[] selectionArgs, String groupBy, String having, String sort) {
		Cursor result = null;
		switch (URL_MATCHER.match(url)) {
		case DIRECTORIES:
			result = getDirectories(selection, selectionArgs, sort);
			break;
		case DIRECTORY:
			long id = Long.parseLong(url.getPathSegment(1));
			result = getDirectory(id);
			break;
		case INDEX_ENTRIES:
			StringBuffer selectionBuf = new StringBuffer();
			ArrayList<String> argsList = new ArrayList<String>();

			List<String> keywords = null;
			try {
				keywords = url.getQueryParameters(Entry.QUERY_KEYWORD);
			} catch (URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if (keywords != null) {
				for (int i = 0; i < keywords.size(); i++) {
					if (selectionBuf.length() > 0) {
						selectionBuf.append(" AND ");
					}
					selectionBuf.append("items.body LIKE ?");
					argsList.add("%" + keywords.get(i) + "%");
				}
			}

			List<String> directories = null;
			try {
				directories = url.getQueryParameters(Entry.QUERY_DIRECTORY);
			} catch (URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if (directories != null) {
				for (int i = 0; i < directories.size(); i++) {
					if (selectionBuf.length() > 0) {
						selectionBuf.append(" AND ");
					}
					selectionBuf.append("? LIKE dir.uri || '%'");
					argsList.add(directories.get(i));
				}
			}
			String[] columns = new String[] { "items.dir_id", "items.item_id",
					"items.body" };
			String[] args;

			selection = "items.dir_id = dir._id AND " + selectionBuf.toString();
			args = argsList.toArray(new String[argsList.size()]);
			Log.d(TAG, selection);

			mDb.query("items items, dirs dir", columns, selection, args, null,
					null, "item_id DESC");
		default:
			throw new IllegalArgumentException("Unknown URL " + url);
		}

		return result;
	}

	@Override
	public int update(ContentURI contenturi, ContentValues contentvalues,
			String s, String[] as) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int delete(ContentURI contenturi, String s, String[] as) {
		return 0;
	}

	@Override
	public ContentURI insert(ContentURI contenturi, ContentValues contentvalues) {
		// TODO Auto-generated method stub
		return null;
	}

	static {
		URL_MATCHER = new ContentURIParser(ContentURIParser.NO_MATCH);
		URL_MATCHER.addURI("org.openintents.contentindices", "directories",
				DIRECTORIES);
		URL_MATCHER.addURI("org.openintents.contentindices", "directories/#",
				DIRECTORY);
		URL_MATCHER.addURI("org.openintents.contentindices", "entries",
				INDEX_ENTRIES);
	}
}
