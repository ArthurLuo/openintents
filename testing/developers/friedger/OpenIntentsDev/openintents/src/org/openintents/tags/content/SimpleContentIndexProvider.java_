package org.openintents.tags.content;

import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map.Entry;

import org.openintents.R;

import android.content.ContentProvider;
import android.content.ContentURIParser;
import android.content.ContentValues;
import android.content.Resources;
import android.content.Resources.NotFoundException;
import android.database.Cursor;
import android.database.MergeCursor;
import android.net.ContentURI;

public class SimpleContentIndexProvider extends ContentProvider {

	private DirectoryRegister mRegister;
	private static final String TAG = "SimpleContentIndexProvider";

	private static final ContentURIParser URL_MATCHER;
	private static final int DIRECTORIES = 1;
	private static final int DIRECTORY = 2;
	private static final int INDEX_ENTRIES = 3;

	@Override
	public boolean onCreate() {
		boolean result; 
		mRegister = new DirectoryRegister();
		Resources res = getContext().getResources();
		try {
			mRegister.fromXML(res.openRawResource(R.raw.browser));
			mRegister.fromXML(res.openRawResource(R.raw.contacts));
			mRegister.fromXML(res.openRawResource(R.raw.notepad));
			mRegister.fromXML(res.openRawResource(R.raw.media));
			result = true;
		} catch (Exception e) {
			e.printStackTrace();
			result = false;
		}
		return result;
	}

	@Override
	public int delete(ContentURI arg0, String arg1, String[] arg2) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public ContentURI insert(ContentURI arg0, ContentValues arg1) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public Cursor query(ContentURI url, String[] projection, String selection,
			String[] selectionArgs, String groupBy, String having, String sort) {
		Cursor result = null;
		switch (URL_MATCHER.match(url)) {
		case DIRECTORIES:
			result = null;
			break;
		case DIRECTORY:
			long id = Long.parseLong(url.getPathSegment(1));
			result = null;
			break;
		case INDEX_ENTRIES:

			List<String> directories = null;
			try {
				directories = url.getQueryParameters(org.openintents.provider.ContentIndex.Entry.QUERY_DIRECTORY);
			} catch (URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			ArrayList<ArrayList>rows = new ArrayList<ArrayList>();
			for (Directory dir:mRegister.getDirectories().values()){
				try {
					cursor = getContext().getContentResolver().query(dir.createURI(url.getPathLeaf(), ""), dir.getTextColumns(), null, null, null);
					new MergeCursor()
				} catch (URISyntaxException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}	
			}
			
			
		default:
			throw new IllegalArgumentException("Unknown URL " + url);
		}

		return result;
	}

	@Override
	public int update(ContentURI uri, ContentValues values, String selection,
			String[] selectionArgs) {
		// TODO Auto-generated method stub
		return 0;
	}


	@Override
	public String getType(ContentURI url) {
		switch (URL_MATCHER.match(url)) {
		case DIRECTORIES:
			return "vnd.openintents.cursor.dir/contentdirectory";

		case DIRECTORY:
			return "vnd.openintents.cursor.item/contentdirectory";
		case INDEX_ENTRIES:
			return "vnd.openintents.cursor.item/contentindexentry";
		default:
			throw new IllegalArgumentException("Unknown URL " + url);
		}
	}

	
	static {
		URL_MATCHER = new ContentURIParser(ContentURIParser.NO_MATCH);
		URL_MATCHER.addURI("org.openintents.contentindices", "directories",
				DIRECTORIES);
		URL_MATCHER.addURI("org.openintents.contentindices", "directories/#",
				DIRECTORY);
		URL_MATCHER.addURI("org.openintents.contentindices", "entries",
				INDEX_ENTRIES);
	}

}
